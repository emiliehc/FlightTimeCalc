/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Util;

/**
 *
 * @author njche
 */
public class TAStoGS extends javax.swing.JFrame {

    /**
     * Creates new form TAStoGS
     */
    public TAStoGS() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblWindSpeed = new javax.swing.JLabel();
        txtWindSpeed = new javax.swing.JTextField();
        lblWindDirection = new javax.swing.JLabel();
        txtWindDirection = new javax.swing.JTextField();
        btnCalculate = new javax.swing.JButton();
        lblTAS = new javax.swing.JLabel();
        txtTAS = new javax.swing.JTextField();
        txtGS = new javax.swing.JTextField();
        lblGS = new javax.swing.JLabel();
        txtCrs = new javax.swing.JTextField();
        lblTrk = new javax.swing.JLabel();
        lblHdg = new javax.swing.JLabel();
        txtHdg = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("TAS to GS");

        lblWindSpeed.setText("Wind Speed (kt)");

        txtWindSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWindSpeedActionPerformed(evt);
            }
        });

        lblWindDirection.setText("Wind Direction");

        txtWindDirection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWindDirectionActionPerformed(evt);
            }
        });

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        lblTAS.setText("TAS (kt)");

        txtTAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTASActionPerformed(evt);
            }
        });

        lblGS.setText("GS (kt)");

        txtCrs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCrsActionPerformed(evt);
            }
        });

        lblTrk.setText("True Course (degrees)");

        lblHdg.setText("True Heading (degrees)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCalculate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtGS)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtWindSpeed)
                            .addComponent(lblWindSpeed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblWindDirection)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtWindDirection)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGS)
                            .addComponent(lblHdg))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtHdg, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTAS, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTAS))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTrk)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtCrs))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWindSpeed)
                    .addComponent(lblWindDirection))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWindSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtWindDirection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTAS)
                    .addComponent(lblTrk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTAS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCalculate)
                .addGap(5, 5, 5)
                .addComponent(lblGS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHdg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHdg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtWindSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWindSpeedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWindSpeedActionPerformed

    private void txtWindDirectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWindDirectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWindDirectionActionPerformed

    private void txtTASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTASActionPerformed
        // TODO add your handling code here:

        
    }//GEN-LAST:event_txtTASActionPerformed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        // TODO add your handling code here:
        double WS = Double.parseDouble(txtWindSpeed.getText());
        double WD = Double.parseDouble(txtWindDirection.getText());
        double TAS = Double.parseDouble(txtTAS.getText());
        double targetCrs = Double.parseDouble(txtCrs.getText());
        double driftAngle;
        double trk;
        double GS;
        double hdg = targetCrs;
        
        
        int count = 0;
        while (count < 100) {
            count ++;
            // calculate the angle difference
            double angleDifference = WD - hdg;
            //System.out.println(angleDifference);
            
            // separate the wind components
            double htWind = WS * Math.cos(Math.toRadians(angleDifference));
            double xWind = WS * Math.sin(Math.toRadians(angleDifference));
            //System.out.println(htWind);
            //System.out.println(xWind);
            
            // calculate the real ground speed
            double TASafterHTwind = TAS - htWind;
            GS = Math.sqrt(Math.pow(TASafterHTwind, 2) + Math.pow(xWind, 2));
            //System.out.println(GS);
            
            // calculate the drift angle
            driftAngle = -Math.toDegrees(Math.atan(xWind / TASafterHTwind));
            // calculate the track
            trk = hdg + driftAngle;
            //System.out.println(driftAngle);
            //System.out.println(trk);
            
            // show the result
            txtGS.setText(Double.toString(GS));
            txtHdg.setText(Double.toString(hdg));
            System.out.println(GS + "\t" + hdg);
            // all required air data is obtained, start the simulation
            
            hdg = hdg + (targetCrs - trk);
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void txtCrsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCrsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCrsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TAStoGS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TAStoGS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TAStoGS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TAStoGS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TAStoGS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculate;
    private javax.swing.JLabel lblGS;
    private javax.swing.JLabel lblHdg;
    private javax.swing.JLabel lblTAS;
    private javax.swing.JLabel lblTrk;
    private javax.swing.JLabel lblWindDirection;
    private javax.swing.JLabel lblWindSpeed;
    private javax.swing.JTextField txtCrs;
    private javax.swing.JTextField txtGS;
    private javax.swing.JTextField txtHdg;
    private javax.swing.JTextField txtTAS;
    private javax.swing.JTextField txtWindDirection;
    private javax.swing.JTextField txtWindSpeed;
    // End of variables declaration//GEN-END:variables
}
